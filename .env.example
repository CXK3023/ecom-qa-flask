# ==================================
# OpenAI API Configuration
# ==================================
# 你的 OpenAI API 密钥 (例如: sk-...)
OPENAI_API_KEY='YOUR_OPENAI_API_KEY_HERE'

# 你的 OpenAI 代理服务器地址 (通常以 /v1 结尾)
# 例如: https://api.yourproxy.com/v1/
OPENAI_API_BASE='YOUR_OPENAI_PROXY_BASE_URL_HERE'

# ==================================
# Database Configuration
# ==================================
# 数据库连接字符串
# 格式: mysql+<driver>://<user>:<url_encoded_password>@<host>:<port>/<database>
# - <driver>: mysqlconnector (如果安装了 mysql-connector-python) 或 pymysql (如果安装了 PyMySQL)
# - <user>: docker-compose.yml 中设置的 MYSQL_USER (例如: ecom_user)
# - <url_encoded_password>: docker-compose.yml 中设置的 MYSQL_PASSWORD, 经过 URL 编码
# - <host>: 127.0.0.1 (因为我们通过端口映射访问 Docker 容器)
# - <port>: docker-compose.yml 中映射出来的主机端口 (例如: 3307)
# - <database>: docker-compose.yml 中设置的 MYSQL_DATABASE (例如: ecom_qa_db)
#
# 示例 (假设密码是 MyP@sswOrd! ):
# URL 编码后密码是 MyP%40sswOrd%21
# DATABASE_URL='mysql+mysqlconnector://ecom_user:MyP%40sswOrd%21@127.0.0.1:3307/ecom_qa_db'
DATABASE_URL='mysql+mysqlconnector://ecom_user:YOUR_URL_ENCODED_DATABASE_PASSWORD_HERE@127.0.0.1:3307/ecom_qa_db'

# ==================================
# Flask Application Configuration
# ==================================
# Flask 的会话密钥，用于保护用户会话信息，请务必设置为一个长且随机的字符串
# 你可以使用 Python 生成一个: python -c 'import secrets; print(secrets.token_hex(24))'
FLASK_SECRET_KEY='YOUR_VERY_STRONG_RANDOM_SECRET_KEY_HERE'

# (可选) Flask 运行模式 (默认是 production)
# 设置为 development 可以开启更多调试功能，但生产环境不应使用
# FLASK_ENV=development